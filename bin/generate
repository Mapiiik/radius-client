#!/usr/bin/env php
<?php

/*
 * This file is part of mapik/radius-client.
 *
 * (c) Jonas Stendahl <jonas@stendahl.me>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace Mapik\RadiusClient;

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

require dirname(__DIR__).'/vendor/autoload.php';

$application = new Application(__FILE__);
$command = $application->register('echo');
$resolver = function ($type, array $options = []) {
    if (array_key_exists('encrypt', $options)) {
        switch ((int) $options['encrypt']) {
            case 1:
                return [Attributes\StringEncryptOneAttribute::class];
            case 2:
                return [Attributes\StringEncryptTwoAttribute::class];
            default:
                throw new \RuntimeException('Unknown encrypt mode "'.$options['encrypt'].'"');
        }
    }

    switch ($type) {
        case 'date':
            return [Attributes\DateAttribute::class];
        case 'ifid':
            return [Attributes\OctetsAttribute::class]; // @todo should be something else
        case 'integer':
            return [Attributes\IntegerAttribute::class];
        case 'ipaddr':
            return [Attributes\IpAddressAttribute::class, [Attributes\IpAddressAttribute::OPTION_MODE => FILTER_FLAG_IPV4]];
        case 'ipv6addr':
            return [Attributes\IpAddressAttribute::class, [Attributes\IpAddressAttribute::OPTION_MODE => FILTER_FLAG_IPV6]];
        case 'ipv6prefix':
            return [Attributes\OctetsAttribute::class]; // @todo should be something else
        case 'octets':
            return [Attributes\OctetsAttribute::class];
        case 'octets[8]':
            return [Attributes\OctetsAttribute::class, [Attributes\OctetsAttribute::OPTION_SIZE => 8]];
        case 'octets[14]':
            return [Attributes\OctetsAttribute::class, [Attributes\OctetsAttribute::OPTION_SIZE => 14]];
        case 'octets[16]':
            return [Attributes\OctetsAttribute::class, [Attributes\OctetsAttribute::OPTION_SIZE => 16]];
        case 'string':
            return [Attributes\StringAttribute::class];
        case 'tlv':
            return [Attributes\OctetsAttribute::class]; // @todo should be something else
        case 'vsa':
            return [Attributes\StringAttribute::class];
        default:
            throw new \RuntimeException('Unknown type "'.$type.'"');
    }
};

$command->addArgument('source', InputArgument::REQUIRED);
$command->addArgument('name', InputArgument::REQUIRED);
$command->setCode(function (InputInterface $input, OutputInterface $output) use ($resolver) {
    $source = trim($input->getArgument('source'));
    $name = trim($input->getArgument('name'));
    $dictionary = file_get_contents($source);
    $lines = explode("\n", $dictionary);
    $vendorContext = null;
    $attributes = [];
    $vendors = [];
    $values = [];

    foreach ($lines as $line) {
        $line = trim($line);

        if ('' === $line || 0 === strpos($line, '#')) {
            continue;
        }

        $commentPos = strpos($line, '#');

        if (false !== $commentPos) {
            $line = substr($line, 0, $commentPos);
            $line = rtrim($line);
        }

        $line = preg_replace('/\\s+/', "\t", $line);
        $parts = explode("\t", $line);
        $numOfParts = count($parts);

        switch ($parts[0]) {
            case 'ATTRIBUTE':
                if ($numOfParts < 4 || $numOfParts > 5) {
                    throw new \RuntimeException('Unable to parse "'.$line.'"');
                }

                $options = [];

                if (array_key_exists(4, $parts)) {
                    $options = array_reduce(explode(',', $parts[4]), function (array $carry, $option) {
                        $parts = explode('=', $option);
                        $value = array_key_exists(1, $parts) ? $parts[1] : null;
                        $carry[$parts[0]] = $value;

                        return $carry;
                    }, []);
                }

                $encoder = $resolver($parts[3], $options);
                $attributes[] = [
                    'encoder' => [
                        'class' => (new \ReflectionClass($encoder[0]))->getShortName(),
                        'options' => array_key_exists(1, $encoder) ? $encoder[1] : [],
                    ],
                    'has_tag' => array_key_exists('has_tag', $options),
                    'name' => $parts[1],
                    'type' => (int) $parts[2],
                    'vendor' => $vendorContext,
                ];

                break;
            case 'BEGIN-VENDOR':
                if (2 !== $numOfParts) {
                    throw new \RuntimeException('Unable to parse "'.$line.'"');
                }

                if (false === array_key_exists($parts[1], $vendors)) {
                    throw new \RuntimeException('Unknown vendor "'.$parts[1].'"');
                }

                $vendorContext = $vendors[$parts[1]]['identifier'];

                break;
            case 'END-VENDOR':
                if (2 !== $numOfParts) {
                    throw new \RuntimeException('Unable to parse "'.$line.'"');
                }

                $vendorContext = null;

                break;
            case 'VALUE':
                if (4 !== $numOfParts) {
                    throw new \RuntimeException('Unable to parse "'.$line.'"');
                }

                if (false === ctype_digit($parts[3])) {
                    throw new \RuntimeException($parts[3].' is not an integer');
                }

                $constant = strtoupper($parts[1].'_'.$parts[2]);
                $constant = preg_replace('/[^A-Z\d_]+/', '_', $constant);
                $values[] = [
                    'constant' => $constant,
                    'value' => (int) $parts[3],
                ];

                break;
            case 'VENDOR':
                if (3 !== $numOfParts) {
                    throw new \RuntimeException('Unable to parse "'.$line.'"');
                }

                $vendors[$parts[1]] = [
                    'identifier' => (int) $parts[2],
                    'name' => $parts[1],
                ];

                break;
            default:
                throw new \RuntimeException('Unknown kind "'.$parts[0].'"');
        }
    }

    $loader = new \Twig_Loader_Filesystem(dirname(__DIR__).'/resources/templates');
    $twig = new \Twig_Environment($loader);

    $output->write($twig->render('dictionary.php.twig', [
        'name' => $name,
        'attributes' => $attributes,
        'values' => $values,
        'vendors' => $vendors,
    ]));
});

$application->setDefaultCommand('echo', true);
$application->run();
