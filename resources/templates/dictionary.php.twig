<?php

/*
 * This file is part of boo/radius.
 *
 * (c) Jonas Stendahl <jonas@stendahl.me>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace Boo\Radius\Dictionary;

{% if attributes is not empty %}
use Boo\Radius\Attributes;
{% endif %}
use Boo\Radius\DictionaryInterface;

final class {{ name }} implements DictionaryInterface
{
{% for value in values %}
    const {{ value.constant }} = {{ value.comment ? "#{value.value}; // #{value.comment}" : "#{value.value};" }}
{% endfor %}
{% if values is not empty %}

{% endif %}
    /**
     * @var array[]
     */
    private static $attributes = [
{% for attribute in attributes %}
        [
            'encoder' => [
                'class' => Attributes\{{ attribute.encoder.class }}::class,
                'options' => [
{% for key, value in attribute.encoder.options %}
                    {{ key }} => {{ value }},
{% endfor %}
                ],
            ],
            'has_tag' => {{ attribute.has_tag ? "true" : "false" }},
            'name' => '{{ attribute.name }}',
            'type' => {{ attribute.type }},
            'vendor' => {{ attribute.vendor ? "#{attribute.vendor}" : "null" }},
        ],
{% endfor %}
    ];

    /**
     * @var array[]
     */
    private static $vendors = [
{% for vendor in vendors %}
        [
           'identifier' => {{ vendor.identifier }},
           'name' => '{{ vendor.name }}',
        ],
{% endfor %}
    ];

    /**
     * {@inheritdoc}
     */
    public function getAttributes()
    {
        return self::$attributes;
    }

    /**
     * {@inheritdoc}
     */
    public function getVendors()
    {
        return self::$vendors;
    }
}
